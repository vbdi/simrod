corruption: contrast
severity: 3

test:
  severity: 0


split: target
ckpt_run_id: yolov5x_source                # defines initial checkpoint
pseudo_run_id: ${ckpt_run_id}              # defines pseudolabels in the training data, and the initial weights for pseudolabeling in step 1 and 3
output_run_id: debug                       # defines the run id of the current job (where labels, predictions, and training results are saved)
result_dir: /data/${username}/domain-adaptation/training/runs/${output_run_id}

# step 1 generate labels
step_1:
  weights: /data/${username}/domain-adaptation/training/runs/${pseudo_run_id}/outputs/best.pt   # initial weights to do the pseudo-labeling
  source: /data/${username}/domain-adaptation/target_half/all_v2/images/target-${corruption}-${severity} # images to label
  labels_dir: /data/${username}/domain-adaptation/target_half/all_v2/pseudolabels/${output_run_id}/labels/${split}-${corruption}-${severity}
  predictions_dir: /data/${username}/domain-adaptation/target_half/all_v2/pseudolabels/${output_run_id}/predictions/${split}-${corruption}-${severity}

# step 2 train
step_2:
  weights: /data/${username}/domain-adaptation/training/runs/${ckpt_run_id}/outputs/best.pt
  # train data as 1) directory: path/images/, 2) file: path/images.txt, or 3) list: [path1/images/, path2/images/]
  train:
    - '/data/${username}/domain-adaptation/source_half/labels'   # source data must be put first in the train list!
    - ${step_1.labels_dir}
  result_dir: ${result_dir}/step2_output

# step 3 generate labels
step_3:
  weights: ${step_2.result_dir}/weights/best.pt  # use ${step_1.weights} when using 5X pseudolabels to adapt a smaller model
  source: ${step_1.source}
  labels_dir: /data/${username}/domain-adaptation/target_half/all_v2/pseudolabels/${output_run_id}-refined/labels/${split}-${corruption}-${severity}
  predictions_dir: /data/${username}/domain-adaptation/target_half/all_v2/pseudolabels/${output_run_id}-refined/predictions/${split}-${corruption}-${severity}

# step 4 traind.step_4.train
step_4:
  # train data as 1) directory: path/images/, 2) file: path/images.txt, or 3) list: [path1/images/, path2/images/]
  weights: ${step_2.result_dir}/weights/best.pt
  train:
    - '/data/${username}/domain-adaptation/source_half/labels'
    - ${step_3.labels_dir}
  result_dir: ${result_dir}/final_output


# val data as 1) directory: path/images/, 2) file: path/images.txt, or 3) list: [path1/images/, path2/images/]
val: /data/${username}/domain-adaptation/city_yolo/labels/val-${corruption}-${test.severity} # /home/${username}/data/voc_yolo/VOC2007/labels/test-${corruption}-${test.severity}/  # 4952 images
clean_test: /data/${username}/domain-adaptation/city_yolo/labels/val # /home/${username}/data/voc_yolo/VOC2007/labels/test
corrupt_test: /data/${username}/domain-adaptation/city_yolo/labels/val-${corruption}-${test.severity} # /home/${username}/data/voc_yolo/VOC2007/labels/test-${corruption}-${test.severity}/


# number of classes
nc: 8

names:  ['person', 'rider', 'car', 'truck', 'bus', 'train', 'motorcycle', 'bicycle']
